{"version":3,"sources":["components/Section.js","redux/phohebookActions.js","components/ContactListItem.js","components/ContactList.js","components/ContactEditor.js","components/Filter.js","components/App.js","redux/phoneReducer.js","redux/store.js","index.js"],"names":["Section","children","addContact","createAction","name","number","payload","contact","id","uuidv4","removeContact","changeFilter","connect","state","ownProps","item","contacts","items","find","dispatch","onRemove","type","className","onClick","filter","toLowerCase","includes","length","map","INIT","ContactEditor","handleChange","target","value","setState","handleSubmit","e","preventDefault","props","onAddContact","this","onSubmit","htmlFor","onChange","Component","mapDispatchToProps","onChangeFilter","App","createReducer","action","newContact","alert","combineReducers","store","configureStore","reducer","phoneReducer","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.9a74aff7.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nfunction Section({ children }) {\n  return <section>{children}</section>;\n}\n\nSection.propTypes = {\n  children: PropTypes.node.isRequired,\n};\nexport default Section;\n","import { createAction } from \"@reduxjs/toolkit\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport const addContact = createAction(\"phonebook/add\", ({ name, number }) => ({\n  payload: {\n    contact: {\n      id: uuidv4(),\n      name,\n      number,\n    },\n  },\n}));\n\nexport const removeContact = createAction(\"phonebook/remove\");\n\nexport const changeFilter = createAction(\"phonebook/filter\");\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport { removeContact } from \"../redux/phohebookActions\";\n\nconst ContactListItem = ({ name, number, onRemove }) => (\n  <li>\n    <span>\n      {name} {number}\n    </span>\n    <button type=\"button\" className=\"deleteBtn\" onClick={onRemove}>\n      x\n    </button>\n  </li>\n);\n\nContactListItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onRemove: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  const item = state.contacts.items.find((item) => item.id === ownProps.id);\n  return { ...item };\n};\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n  onRemove: () => dispatch(removeContact(ownProps.id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactListItem);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport ContactListItem from \"./ContactListItem\";\n\nconst ContactList = ({ contacts }) => {\n  if (contacts.length > 0) {\n    return (\n      <ul>\n        {contacts.map(({ id }) => (\n          <ContactListItem key={id} id={id} />\n        ))}\n      </ul>\n    );\n  } else return null;\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n};\n\nconst mapStateToProps = ({ contacts }) => {\n  const { items, filter } = contacts;\n\n  const visibleContacts = items.filter((contact) =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n  return {\n    contacts: visibleContacts,\n  };\n};\n\nexport default connect(mapStateToProps)(ContactList);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { addContact } from \"../redux/phohebookActions\";\n\nconst INIT = {\n  name: \"\",\n  number: \"\",\n};\n\nclass ContactEditor extends Component {\n  state = INIT;\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    this.props.onAddContact(this.state);\n    this.setState(INIT);\n  };\n\n  render() {\n    const { name, number } = this.state;\n    return (\n      <>\n        <h2>Phonebook</h2>\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor=\"name\">\n            Name\n            <br />\n            <input\n              type=\"text\"\n              value={name}\n              onChange={this.handleChange}\n              name=\"name\"\n            />\n          </label>\n          <label htmlFor=\"number\">\n            Number\n            <br />\n            <input\n              type=\"text\"\n              value={number}\n              onChange={this.handleChange}\n              name=\"number\"\n            />\n          </label>\n          <button type=\"submit\" className=\"add_contact\">\n            Add contact\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  onAddContact: addContact,\n};\n\nexport default connect(null, mapDispatchToProps)(ContactEditor);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport { changeFilter } from \"../redux/phohebookActions\";\n\nconst Filter = ({ contacts, value, onChangeFilter }) => {\n  if (contacts.length > 0) {\n    return (\n      <div>\n        <span>Find name</span>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={(e) => onChangeFilter(e.target.value)}\n        />\n      </div>\n    );\n  } else return null;\n};\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  contacts: PropTypes.array.isRequired,\n  onChangeFilter: PropTypes.func.isRequired,\n};\nconst mapStateToProps = (state) => ({\n  contacts: state.contacts.items,\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = {\n  onChangeFilter: changeFilter,\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React from \"react\";\n\nimport Section from \"./Section\";\nimport ContactList from \"./ContactList\";\nimport ContactEditor from \"./ContactEditor\";\nimport Filter from \"./Filter\";\n\nexport default function App() {\n  return (\n    <Section>\n      <ContactEditor />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </Section>\n  );\n}\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\n\nimport { addContact, removeContact, changeFilter } from \"./phohebookActions\";\n\nconst onAddContact = (state, action) => {\n  const newContact = action.payload.contact;\n  const NotUnicName = state.find((contact) => contact.name === newContact.name);\n  if (NotUnicName) {\n    alert(`${newContact.name} alredy exist!`);\n  } else {\n    return [...state, newContact];\n  }\n};\n\nconst onRemoveContact = (state, action) =>\n  state.filter((contact) => contact.id !== action.payload);\n\nconst items = createReducer([], {\n  [addContact]: onAddContact,\n  [removeContact]: onRemoveContact,\n});\n\nconst filter = createReducer(\"\", {\n  [changeFilter]: (state, action) => action.payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore } from \"@reduxjs/toolkit\";\n\nimport phoneReducer from \"./phoneReducer\";\n\nconst store = configureStore({\n  reducer: { contacts: phoneReducer },\n});\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\nimport App from \"./components/App\";\nimport store from \"./redux/store\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}